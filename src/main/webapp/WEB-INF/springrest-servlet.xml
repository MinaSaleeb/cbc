<!-- Mina Samir Saleeb :04-2016 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
 					 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
 					 http://www.springframework.org/schema/context 
        			 http://www.springframework.org/schema/context/spring-context-3.0.xsd 
        			 http://www.springframework.org/schema/mvc 
        			 http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
        			 http://www.springframework.org/schema/tx 
        			 http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        			 http://www.springframework.org/schema/data/jpa 
    				 http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
    				 http://www.springframework.org/schema/task
        			 http://www.springframework.org/schema/task/spring-task-3.2.xsd">


	<!-- It register the beans in context and scan the annotations inside beans 
		and activate them -->
	<context:component-scan base-package="com.cbc.*" />

	<!-- This allow for dispatching requests to Controllers And RESTful Services -->
	<mvc:annotation-driven />

	<!-- This produces a container-managed EntityManagerFactory; rather than 
		application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean -->
	<bean id="entityManagerFactoryBean"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- This makes /META-INF/persistence.xml is no longer necessary -->
		<property name="packagesToScan" value="com.cbc.model" />
		<!-- JpaVendorAdapter implementation for Hibernate EntityManager. Exposes 
			Hibernate's persistence provider and EntityManager extension interface -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${spring.jpa.hibernate.ddl-auto}</prop>
				<prop key="hibernate.dialect">${spring.jpa.properties.hibernate.dialect}</prop>
			</props>
		</property>
	</bean>

	<!-- Simple implementation of the standard JDBC DataSource interface, configuring 
		the plain old JDBC DriverManager via bean properties -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${db.driver}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
	</bean>

	<!-- This transaction manager is appropriate for applications that use a 
		single JPA EntityManagerFactory for transactional data access. JTA (usually 
		through JtaTransactionManager) is necessary for accessing multiple transactional 
		resources within the same transaction. -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactoryBean" />
	</bean>

	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:application.properties</value>
		</property>
	</bean>

	<!-- responsible for registering the necessary Spring components that power 
		annotation-driven transaction management; such as when @Transactional methods 
		are invoked -->
	<tx:annotation-driven/>
	
	<!-- 
    Configure Spring Data JPA and set the base package of the 
    repository interfaces 
  -->
  <jpa:repositories base-package="com.cbc.repository"/>
  
  <!-- Enable configuration of scheduled tasks via annotations -->
    <task:annotation-driven/>

</beans>  
